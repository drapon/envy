#!/bin/bash

# Version management script
# Manages semantic versioning and automatic CHANGELOG updates

set -e

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get current version
get_current_version() {
    if git describe --tags --abbrev=0 2>/dev/null; then
        git describe --tags --abbrev=0 | sed 's/^v//'
    else
        echo "0.0.0"
    fi
}

# Increment version
increment_version() {
    local version=$1
    local type=$2

    IFS='.' read -ra VERSION_PARTS <<< "$version"
    MAJOR=${VERSION_PARTS[0]}
    MINOR=${VERSION_PARTS[1]}
    PATCH=${VERSION_PARTS[2]}

    case $type in
        major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
        minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
        patch)
            PATCH=$((PATCH + 1))
            ;;
        *)
            echo -e "${RED}Error: Invalid version type. Use major, minor, or patch${NC}"
            exit 1
            ;;
    esac
    
    echo "$MAJOR.$MINOR.$PATCH"
}

# Update CHANGELOG
update_changelog() {
    local new_version=$1
    local changelog_file="CHANGELOG.md"
    local temp_file="CHANGELOG.tmp.md"
    local date=$(date +%Y-%m-%d)
    
    # Create CHANGELOG if it doesn't exist
    if [ ! -f "$changelog_file" ]; then
        cat > "$changelog_file" << EOF
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

EOF
    fi
    
    # Generate changes from latest commits
    local last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
    local commit_range=""
    
    if [ -n "$last_tag" ]; then
        commit_range="$last_tag..HEAD"
    else
        commit_range="HEAD"
    fi
    
    # Extract changes from commit messages
    local changes=""
    local features=""
    local fixes=""
    local breaking=""
    local other=""
    
    while IFS= read -r line; do
        if [[ $line == feat:* ]] || [[ $line == feature:* ]]; then
            features+="- ${line#*: }\n"
        elif [[ $line == fix:* ]]; then
            fixes+="- ${line#*: }\n"
        elif [[ $line == "BREAKING CHANGE:"* ]] || [[ $line == breaking:* ]]; then
            breaking+="- ${line#*: }\n"
        elif [[ $line != Merge* ]] && [[ $line != merge* ]]; then
            other+="- $line\n"
        fi
    done < <(git log $commit_range --pretty=format:"%s" --no-merges)
    
    # Create new version section
    {
        # Copy header part
        sed '/## \[Unreleased\]/q' "$changelog_file"
        
        # Add new version section
        echo ""
        echo "## [$new_version] - $date"
        
        if [ -n "$breaking" ]; then
            echo ""
            echo "### ⚠ BREAKING CHANGES"
            echo -e "$breaking"
        fi
        
        if [ -n "$features" ]; then
            echo ""
            echo "### Added"
            echo -e "$features"
        fi
        
        if [ -n "$fixes" ]; then
            echo ""
            echo "### Fixed"
            echo -e "$fixes"
        fi
        
        if [ -n "$other" ]; then
            echo ""
            echo "### Changed"
            echo -e "$other"
        fi
        
        # Copy the rest
        sed '1,/## \[Unreleased\]/d' "$changelog_file"
    } > "$temp_file"
    
    mv "$temp_file" "$changelog_file"
    echo -e "${GREEN}✓ CHANGELOG.md updated${NC}"
}

# Embed version information
embed_version() {
    local version=$1
    local version_file="internal/version/embedded.go"
    local git_commit=$(git rev-parse --short HEAD)
    local build_date=$(date -u +%Y-%m-%dT%H:%M:%SZ)
    
    mkdir -p "$(dirname "$version_file")"
    
    cat > "$version_file" << EOF
// Code generated by scripts/version.sh. DO NOT EDIT.

package version

// Embedded version information
const (
	// Version is the semantic version of the application
	embeddedVersion = "$version"
	
	// GitCommit is the git commit hash
	embeddedGitCommit = "$git_commit"
	
	// BuildDate is the build timestamp
	embeddedBuildDate = "$build_date"
)
EOF
    
    echo -e "${GREEN}✓ Version embedded in $version_file${NC}"
}

# Main process
main() {
    local command=$1
    
    case $command in
        current)
            echo "Current version: v$(get_current_version)"
            ;;
        
        bump)
            local type=${2:-patch}
            local current_version=$(get_current_version)
            local new_version=$(increment_version "$current_version" "$type")
            
            echo -e "${YELLOW}Bumping version from v$current_version to v$new_version${NC}"
            
            # Embed version
            embed_version "$new_version"
            
            # Update CHANGELOG
            update_changelog "$new_version"
            
            # Commit changes
            git add -A
            git commit -m "chore: bump version to v$new_version"
            
            # Create tag
            git tag -a "v$new_version" -m "Release v$new_version"
            
            echo -e "${GREEN}✓ Version bumped to v$new_version${NC}"
            echo -e "${YELLOW}Don't forget to push tags: git push origin v$new_version${NC}"
            ;;
        
        embed)
            local version=${2:-$(get_current_version)}
            embed_version "$version"
            ;;
        
        *)
            echo "Usage: $0 {current|bump [major|minor|patch]|embed [version]}"
            echo ""
            echo "Commands:"
            echo "  current     - Show current version"
            echo "  bump        - Bump version (default: patch)"
            echo "  embed       - Embed version information in Go code"
            exit 1
            ;;
    esac
}

main "$@"